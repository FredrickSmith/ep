
-- JSON fixed for NULL & large numbers

local json = {}
do
	json.null = {}
	local function kind_of(obj)
		if type(obj) ~= 'table' then return type(obj) end
		if obj == json.null     then return 'null'    end
		local i = 1
		for _ in pairs(obj) do if obj[i] ~= nil then i = i + 1 else return 'table' end end
		if i == 1 then return 'table' else return 'array' end
	end
	local function escape_str(s)
		local out_char = {'\\', '"', '/',	'b',	'f',	'n',	'r',	't'}
		for i, c in ipairs({'\\', '"', '/', '\b', '\f', '\n', '\r', '\t'}) do s = s:gsub(c, '\\' .. out_char[i]) end
		return s
	end
	local function skip_delim(str, pos, delim, err_if_missing)
		pos = pos + #str:match('^%s*', pos)
		if str:sub(pos, pos) ~= delim then
			if err_if_missing then error('Expected ' .. delim .. ' near position ' .. pos) end
			return pos, false
		end
		return pos + 1, true
	end
	local function parse_str_val(str, pos, val)
		val = val or ''
		local early_end_error = 'End of input found while parsing string.'
		if pos > #str then error(early_end_error) end
		local c = str:sub(pos, pos)
		if c == '"'	then return val, pos + 1 end
		if c ~= '\\' then return parse_str_val(str, pos + 1, val .. c) end
		local esc_map = {b = '\b', f = '\f', n = '\n', r = '\r', t = '\t'}
		local nextc = str:sub(pos + 1, pos + 1)
		if not nextc then error(early_end_error) end
		return parse_str_val(str, pos + 2, val .. (esc_map[nextc] or nextc))
	end
	local function parse_num_val(str, pos)
		local num_str = str:match('^-?%d+%.?%d*[eE]?[+-]?%d*', pos)
		local val = tonumber(num_str)
		if not val then error('Error parsing number at position ' .. pos .. '.') end
		return val, pos + #num_str
	end

	function json.stringify(obj, as_key)
		local s = {}
		local kind = kind_of(obj)
		if kind == 'array' then
			if as_key then error('Can\'t encode array as key.') end
			s[#s + 1] = '['
			for i, val in ipairs(obj) do
				if i > 1 then s[#s + 1] = ', ' end
				s[#s + 1] = json.stringify(val)
			end
			s[#s + 1] = ']'
		elseif kind == 'table' then
			if as_key then error('Can\'t encode table as key.') end
			s[#s + 1] = '{'
			for k, v in pairs(obj) do
				if #s > 1 then s[#s + 1] = ', ' end
				s[#s + 1] = json.stringify(k, true)
				s[#s + 1] = ':'
				s[#s + 1] = json.stringify(v)
			end
			s[#s + 1] = '}'
		elseif kind == 'string' then return '"' .. escape_str(obj) .. '"'
		elseif kind == 'number' then
			if as_key then return '"' .. string.format ("%.0f", obj) .. '"' end
			return string.format ("%.0f", obj)
		elseif kind == 'boolean' then return tostring(obj)
		elseif kind == 'nil'     then return 'null'
		elseif kind == 'null'    then return 'null'
		else
			error('Unjsonifiable type: ' .. kind .. '.')
		end
		return table.concat(s)
	end
	function json.parse(str, pos, end_delim)
		pos = pos or 1
		if pos > #str then error('Reached unexpected end of input.') end
		local pos = pos + #str:match('^%s*', pos)
		local first = str:sub(pos, pos)
		if first == '{' then
			local obj, key, delim_found = {}, true, true
			pos = pos + 1
			while true do
				key, pos = json.parse(str, pos, '}')
				if key == nil then return obj, pos end
				if not delim_found then error('Comma missing between object items.') end
				pos = skip_delim(str, pos, ':', true)
				obj[key], pos = json.parse(str, pos)
				pos, delim_found = skip_delim(str, pos, ',')
			end
		elseif first == '[' then
			local arr, val, delim_found = {}, true, true
			pos = pos + 1
			while true do
				val, pos = json.parse(str, pos, ']')
				if val == nil then return arr, pos end
				if not delim_found then error('Comma missing between array items.') end
				arr[#arr + 1] = val
				pos, delim_found = skip_delim(str, pos, ',')
			end
		elseif first == '"'                      then return parse_str_val(str, pos + 1)
		elseif first == '-' or first:match('%d') then return parse_num_val(str, pos)
		elseif first == end_delim                then return nil, pos + 1
		else
			local literals = {['true'] = true, ['false'] = false, ['null'] = json.null}
			for lit_str, lit_val in pairs(literals) do
				local lit_end = pos + #lit_str - 1
				if str:sub(pos, lit_end) == lit_str then return lit_val, lit_end + 1 end
			end
			local pos_info_str = 'position ' .. pos .. ': ' .. str:sub(pos, pos + 10)
			error('Invalid json syntax starting at ' .. pos_info_str)
		end
	end
end

-- PrintTable

-- waste of time
function table.GetKeys(a)local b={}local c=1;for d,e in pairs(a)do b[c]=d;c=c+1 end;return b end;function PrintTable(f,g,h)h=h or{}g=g or 0;local b=table.GetKeys(f)table.sort(b,function(i,j)if isnumber(i)and isnumber(j)then return i<j end;return tostring(i)<tostring(j)end)for k=1,#b do local l=b[k]local m=f[l]print(string.rep("\t",g))if istable(m)and not h[m]then h[m]=true;print(tostring(l)..":".."\n")PrintTable(m,g+2,h)h[m]=nil else print(tostring(l).."\t=\t")print(tostring(m).."\n")end end end

-- remade
local PrintTable
PrintTable = function (a, t)
	t = t or 0
	for b, c in pairs (a) do
		print (t ~= 0 and ('	'):rep (t) or '', b, type (c) ~= 'table' and (type (c) == 'number' and string.format ("%.0f", c) or c) or '')
		if type (c) == 'table' then
			PrintTable (c, t + 1)
		end
	end
end

-- TimesRetry

local a = [[]]
local b = json.parse (a)

local t = function (a) return type (a) == 'table' end
for a = 1, #b.questionTimes do
	local b = b.questionTimes [a]
	print (a, b.QuestionID, b.Correct, b.Attempts)
end
	
local c = json.stringify (b)
print (c)

-- Clean nz.co.LanguagePerfect.Services.PortalsAsync.App.AppServicesPortal.GetAppDataForActivitySelection

local a = [[]]
print (a:match ('"Collections":({.+}),"Stats"'))

-- Scrape nz.co.LanguagePerfect.Services.PortalsAsync.App.AppServicesPortal.GetAppDataForActivitySelection

local a = [[{"Personal":[],"Class":[],"Generic":[{"ID":558835,"Title":"Basic Vocab","Description":"","Editable":false,"Words":[467283,467284,467285,467286,467287,467288,467289,467290,467291,467292,467293,467294,467295,467296,467297,467298,467299,467300,467301,467302,467303,467304,467305,467306,467307,467308,467309,467310,467311,467312,467313,467314,467315,467316,467317,467318,467319,467320,467321,467322,467323,467324,467325,467326,467327,467328,467329,467330,467331,467332,467333,467334,467335,467336,467337,467338,467339,467340,467341,467342,467343,467344,467345,467346,467347,467348,467349,467350,467351,467352,467353,467354,467355,467356,467357,467358,467359,467360,467361,467362,467363,467364,467365,467366,467367,467368,467369,467370,467371,467372,467373,467374,467375,467376,467377,467378,467379,467380,467381,467382,467383,467384,467385,467386,467387,467388,467389,467390,467391,467392,467393,467394,467395,467396,467397,467398,467399,467400,467401,467402,467403,467404,467405,467406,467407,467408,467409,467410,467411,467412,467413,467414,467415,467416,467417,467418,467419,467420,467421,467422,467423,467424,467425,467426,467427,467428,467429,467430,467431,467432,467433,467434,467435,467436,467437,467438,467439,467440,467441,467442,467443,467444,467445,467446,467447,467448,467449,467450,467451,467452,467453,467454,467455,467456,467457,467458,467459,467460,467461,467462,467463,467464,467465,467466,467467,467468,467469,467470,467471,467472,467473,467474,467475,467476,467477,467478,467479,467480,467481,467482,467483,467484,467485,467486,467487,467488,467489,467490,467491,467492,467493,467494,467495,467496,467497,467498,467499,467500,467501,467502,467503,467504,467505,467506,467507,467508,467509,467510,467511,467512,467513,467514,467515,467516,467517,467518,467519,467520,467521,467522,467523,467524,467525,467526,467527,467528,467529,467530,467531,467532,467533,467534,467535,467536,467537,467538,467539,467540,467541,467542,467543,467544,467545,467546,467547,467548,467549,467550,467551,467552,467553,467554,467555,467556,467557,467558,467559,467560,467561,467562,467563,467564,467565,467566,467567,467568,467569,467596,467597,467598,467599,467600,467601,467602,467603,467604,467617,467618,467619,467620,467621,467622,467623,467624,467625,467626,467627,467628,467629,467630,467631,467632,467633,467634,467635,467636,467637,467638,467639,467640,467641,467642,467643,467896,467897,467898,467899,467900,467901,467902,467903,467904,467905,468438,468439,468440,468441,468442,468443,468444,468445],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558836,"Title":"Alphabet","Description":"","Editable":false,"Words":[467570,467571,467572,467573,467575,467576,467577,467579,467580,467581,467582,467583,467584,467585,467586,467587,467588,467589,467590,467591,467592,467593,467594,467595],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558837,"Title":"Verbs: to be","Description":"","Editable":false,"Words":[467564,467605,467606,467607,467608,467609,467610],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558838,"Title":"Verbs: to have","Description":"","Editable":false,"Words":[467424,467611,467612,467613,467614,467615,467616],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558839,"Title":"Question Words","Description":"","Editable":false,"Words":[467463,467549,467550,467553,467555,467560,467644,467645,467646,467647],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558840,"Title":"Numbers","Description":"","Editable":false,"Words":[467648,467649,467650,467651,467652,467653,467654,467655,467656,467657,467658,467659,467660,467661,467662,467663,467664,467665,467666,467667,467668,467669,467670,467671,467672,467673,467674,467675,467676,467677,467678,467679,467680,467681,467682,467683,467684,467685,467686,467687,467688,467689,467690,467691,467692,467693,467694,467695,467696,467697,467698,467699,467700,467701,467702,467703,467704,467705,467706,467707,467708,467709,467710,467711,467712,467713,467714,467715,467716,467717,467718,467719,467720,467721,467722,467723,467724,467725,467726,467727,467728,467729,467730],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558841,"Title":"Days of the Week","Description":"","Editable":false,"Words":[467537,467731,467732,467733,467734,467735,467736,467737,467738,467739,467740,467741,467742,467743,467744,467745,467746,467747,467748,467749,467750,467751,467752,467753],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558842,"Title":"Months","Description":"","Editable":false,"Words":[467488,467754,467755,467756,467757,467758,467759,467760,467761,467762,467763,467764,467765,467766,467767,467768,467769],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558843,"Title":"Time Expressions","Description":"","Editable":false,"Words":[467770,467771,467772,467773,467811,467812,467813,467814,467815,467816,467817,467818,467819,467820,467821,467822,467823],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558844,"Title":"Directions","Description":"","Editable":false,"Words":[467774,467775,467776,467777,467778,467779,467780],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558845,"Title":"Colours ","Description":"","Editable":false,"Words":[467304,467781,467782,467783,467784,467785,467786,467787,467788,467789,467790,467791,467792,467793,467794,467795],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558846,"Title":"Shapes","Description":"","Editable":false,"Words":[467796,467797,467798,467799,467800,467801,467802,467803,467804,467805,467806,467807,467808,467809,467810],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558847,"Title":"Weather","Description":"","Editable":false,"Words":[467824,467825,467826,467827,467828,467829,467830,467831,467832,467833,467834,467835,467836,467837,467838,467839],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558848,"Title":"Family","Description":"","Editable":false,"Words":[467398,467840,467841,467842,467843,467844,467845,467846,467847,467848,467849,467850,467851,467852,467853,467854,467855,467856,467857,467858,467859,467860,467861,467862,467863,467864,467865,467866,467867,467868,467869,467870,467871,467872,467873,467874,467875,467876,467877,467878,467879,467880,467881,467882,467883,467884,467885,467886],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558849,"Title":"Animals","Description":"","Editable":false,"Words":[467887,467888,467889,467890,467891,467892,467893,467894,467895],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558850,"Title":"Verbs","Description":"","Editable":false,"Words":[467296,467397,467399,467400,467405,467408,467414,467424,467461,467472,467476,467477,467489,467543,467562,467564,467566,467906,467907,467908,467909,467910,468033,468035,468036,468040,468041,468044,468045,468046,468047,468048,468049,468063,468064,468065,468066,468067,468068,468069,468070,468071,468072,468073,468074,468075,468076,468077,468078,468104,468105,468106,468107,468108,468109,468110,468111,468112,468113,468114,468115,468116,468117,468118,468119,468120,468121,468122,468123,468124,468125,468126,468127,468128,468129,468130,468131,468132,468133,468134,468135,468136,468137,468138,468139,468140,468141,468142,468143,468144],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558851,"Title":"Jobs","Description":"","Editable":false,"Words":[467911,467912,467913,467914,467915,467916,467917,467918,467919,467920,467921,467922,467923,467924,467925,467926,467927,467928,467929,467930,467931,467932,467933,467934,467935,467936,467937,467938,467939],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558852,"Title":"Prepositions","Description":"","Editable":false,"Words":[467300,467492,467533,467546,467940,467941,467942,467943,467944,467945,467946,467947,467948,467949,467950,467951,467952,467953,467954,467955,467956,467957,467958,467959,467960,467961,467962,467963,467964,467965,467966,467967,467968,467969],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558853,"Title":"Nationalities","Description":"","Editable":false,"Words":[467970,467971,467972,467973,467974,467975,467976,467977,467978,467979,467980,467981,467982,467983,467984,467985,467986,467987,467988,467989,467990,467991,467992,467993,467994,467995,467996,467997,467998,467999],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558854,"Title":"Countries","Description":"","Editable":false,"Words":[468000,468001,468002,468003,468004,468005,468006,468007,468008,468009,468010,468011,468012,468013,468014,468015,468016,468017,468018,468019,468020,468021,468022,468023,468024,468025,468026,468027,468028,468029,468030],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558855,"Title":"Irregular Verbs","Description":"","Editable":false,"Words":[467408,468031,468032,468033,468034,468035,468036,468037,468038,468039,468040,468041,468042,468043,468044,468045],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558856,"Title":"Reflexive Verbs","Description":"","Editable":false,"Words":[468050,468051,468052,468053,468054,468055,468056,468057,468058,468059,468060,468061,468062],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558857,"Title":"Verbs with Prepositions","Description":"","Editable":false,"Words":[468079,468080,468081,468082,468083,468084,468085,468086,468087,468088,468089,468090,468091,468092,468093,468094,468095,468096,468097,468098,468099,468100,468101,468102,468103],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558858,"Title":"Zijn Verbs","Description":"","Editable":false,"Words":[467408,467476,467562,467564,468032,468145,468146,468147,468148,468149],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558859,"Title":"Food","Description":"","Editable":false,"Words":[468150,468151,468152,468153,468154,468155,468156,468157,468158,468159,468160,468161,468162,468163,468164,468165,468166,468167,468168,468169,468170,468171,468172,468173,468174,468175,468176,468177,468178,468179,468180,468181,468182,468183,468184,468185,468186,468187,468188,468189,468190,468191,468192,468193,468194,468195,468196,468197,468198,468199,468200,468201,468202,468203,468204,468205,468206,468207,468208,468209,468210,468211,468212,468213,468214,468215,468216,468217,468218,468219,468220,468221,468222,468223,468224,468225,468226,468227,468228,468229,468230,468231,468232,468233],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558860,"Title":"Conjunctions","Description":"","Editable":false,"Words":[467553,468234,468235,468236,468237,468238,468239,468240,468241,468242,468243,468244,468245,468246,468247,468248,468249,468250,468251,468252,468253,468254],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558861,"Title":"Places","Description":"","Editable":false,"Words":[468255,468256,468257,468258,468259,468260,468261,468262,468263,468264,468265,468266,468267,468268,468269,468270,468271,468272,468273,468274,468275,468276,468277,468278,468279,468280,468281,468282,468283,468284,468285,468286,468287,468288,468289,468290,468291,468292,468293,468294,468295,468296,468297,468298,468299,468300,468301,468302,468303,468304,468305,468306],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558862,"Title":"Transport","Description":"","Editable":false,"Words":[468307,468308,468309,468310,468311,468312,468313,468314,468315,468316,468317],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558863,"Title":"Around the House","Description":"","Editable":false,"Words":[468179,468278,468318,468319,468320,468321,468322,468323,468324,468325,468326,468327,468328,468329,468330,468331,468332,468333,468334,468335,468336,468337,468338,468339,468340,468341,468342,468343,468344,468345,468346,468347,468348,468349,468350,468351,468352,468353,468354,468355,468356,468357,468358,468359,468360,468361,468362,468363,468364,468365,468366,468367,468368,468369,468370,468371,468372,468373,468374,468375,468376,468377,468378,468379,468380,468381,468382,468383,468384,468385,468386,468387,468388,468389,468390,468391,468392,468393],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558864,"Title":"Clothing","Description":"","Editable":false,"Words":[468394,468395,468396,468397,468398,468399,468400,468401,468402,468403,468404,468405,468406,468407,468408,468409,468410,468411,468412,468413,468414,468415,468416,468417,468418,468419,468420,468421,468422,468423,468424,468425,468426,468427,468428,468429,468430,468431,468432,468433,468434,468435,468436,468437],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5},{"ID":558865,"Title":"Adjectives","Description":"","Editable":false,"Words":[467403,467416,467417,467470,467473,467494,467503,467511,467568,467794,467795,468446,468447,468448,468449,468450,468451,468452,468453,468454,468455,468456,468457,468458,468459,468460,468461,468462,468463,468464,468465,468466,468467,468468,468469,468470,468471,468472,468473,468474,468475,468476,468477,468478,468479,468480,468481,468482,468483,468484,468485,468486,468487,468488,468489,468490,468491,468492,468493,468494,468495,468496,468497,468498,468499,468500,468501,468502,468503,468504,468505,468506],"Purpose":1,"Structure":0,"DisplayOptions":null,"Folder":"","ActivityType":1,"ContentType":1,"ApprovalLevel":5}]}]]
local b = json.parse (a)
local c = {}

for d = 1, #b.Generic do
	c [b.Generic [d].ID] = {}
	for e = 1, #b.Generic [d].Words do
		c [b.Generic [d].ID] [#c [b.Generic [d].ID] + 1] = b.Generic [d].Words [e]
	end
end

print (json.stringify (c))
c = json.parse (json.stringify (c))

-- Editing nz.co.LanguagePerfect.Services.PortalsAsync.App.AppServicesPortal.StoreActivityUsageData3
-- Single

local a = [[{"id":6983,"method":"nz.co.LanguagePerfect.Services.PortalsAsync.App.AppServicesPortal.StoreActivityUsageData3","params":[330223608350655,[{"UserID":1572817,"QuestionID":467796,"Time":21,"TimeMS":null,"Correct":true,"Attempts":1,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467797,"Time":2,"TimeMS":null,"Correct":true,"Attempts":1,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467798,"Time":6,"TimeMS":null,"Correct":true,"Attempts":1,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467797,"Time":2,"TimeMS":null,"Correct":true,"Attempts":2,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467800,"Time":2,"TimeMS":null,"Correct":true,"Attempts":1,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467799,"Time":4,"TimeMS":null,"Correct":true,"Attempts":1,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467801,"Time":3,"TimeMS":null,"Correct":true,"Attempts":1,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467800,"Time":2,"TimeMS":null,"Correct":true,"Attempts":2,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467798,"Time":6,"TimeMS":null,"Correct":true,"Attempts":2,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467796,"Time":5,"TimeMS":null,"Correct":true,"Attempts":2,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467801,"Time":3,"TimeMS":null,"Correct":true,"Attempts":2,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467802,"Time":2,"TimeMS":null,"Correct":true,"Attempts":1,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467804,"Time":10,"TimeMS":null,"Correct":true,"Attempts":1,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467799,"Time":3,"TimeMS":null,"Correct":true,"Attempts":2,"ListID":558846,"LearningContext":1},{"UserID":1572817,"QuestionID":467803,"Time":3,"TimeMS":null,"Correct":true,"Attempts":1,"ListID":558846,"LearningContext":1}],[{"ListID":558846,"QuestionsAnswered":15,"TimeTaken":108,"TimeTakenMS":null,"LearningContext":1}],108,null,178106238947015]}]]
      a = json.parse (a)
local b = '{"558859":[468150, 468151, 468152, 468153, 468154, 468155, 468156, 468157, 468158, 468159, 468160, 468161, 468162, 468163, 468164, 468165, 468166, 468167, 468168, 468169, 468170, 468171, 468172, 468173, 468174, 468175, 468176, 468177, 468178, 468179, 468180, 468181, 468182, 468183, 468184, 468185, 468186, 468187, 468188, 468189, 468190, 468191, 468192, 468193, 468194, 468195, 468196, 468197, 468198, 468199, 468200, 468201, 468202, 468203, 468204, 468205, 468206, 468207, 468208, 468209, 468210, 468211, 468212, 468213, 468214, 468215, 468216, 468217, 468218, 468219, 468220, 468221, 468222, 468223, 468224, 468225, 468226, 468227, 468228, 468229, 468230, 468231, 468232, 468233], "558844":[467774, 467775, 467776, 467777, 467778, 467779, 467780], "558860":[467553, 468234, 468235, 468236, 468237, 468238, 468239, 468240, 468241, 468242, 468243, 468244, 468245, 468246, 468247, 468248, 468249, 468250, 468251, 468252, 468253, 468254], "558845":[467304, 467781, 467782, 467783, 467784, 467785, 467786, 467787, 467788, 467789, 467790, 467791, 467792, 467793, 467794, 467795], "558861":[468255, 468256, 468257, 468258, 468259, 468260, 468261, 468262, 468263, 468264, 468265, 468266, 468267, 468268, 468269, 468270, 468271, 468272, 468273, 468274, 468275, 468276, 468277, 468278, 468279, 468280, 468281, 468282, 468283, 468284, 468285, 468286, 468287, 468288, 468289, 468290, 468291, 468292, 468293, 468294, 468295, 468296, 468297, 468298, 468299, 468300, 468301, 468302, 468303, 468304, 468305, 468306], "558846":[467796, 467797, 467798, 467799, 467800, 467801, 467802, 467803, 467804, 467805, 467806, 467807, 467808, 467809, 467810], "558862":[468307, 468308, 468309, 468310, 468311, 468312, 468313, 468314, 468315, 468316, 468317], "558847":[467824, 467825, 467826, 467827, 467828, 467829, 467830, 467831, 467832, 467833, 467834, 467835, 467836, 467837, 467838, 467839], "558863":[468179, 468278, 468318, 468319, 468320, 468321, 468322, 468323, 468324, 468325, 468326, 468327, 468328, 468329, 468330, 468331, 468332, 468333, 468334, 468335, 468336, 468337, 468338, 468339, 468340, 468341, 468342, 468343, 468344, 468345, 468346, 468347, 468348, 468349, 468350, 468351, 468352, 468353, 468354, 468355, 468356, 468357, 468358, 468359, 468360, 468361, 468362, 468363, 468364, 468365, 468366, 468367, 468368, 468369, 468370, 468371, 468372, 468373, 468374, 468375, 468376, 468377, 468378, 468379, 468380, 468381, 468382, 468383, 468384, 468385, 468386, 468387, 468388, 468389, 468390, 468391, 468392, 468393], "558848":[467398, 467840, 467841, 467842, 467843, 467844, 467845, 467846, 467847, 467848, 467849, 467850, 467851, 467852, 467853, 467854, 467855, 467856, 467857, 467858, 467859, 467860, 467861, 467862, 467863, 467864, 467865, 467866, 467867, 467868, 467869, 467870, 467871, 467872, 467873, 467874, 467875, 467876, 467877, 467878, 467879, 467880, 467881, 467882, 467883, 467884, 467885, 467886], "558864":[468394, 468395, 468396, 468397, 468398, 468399, 468400, 468401, 468402, 468403, 468404, 468405, 468406, 468407, 468408, 468409, 468410, 468411, 468412, 468413, 468414, 468415, 468416, 468417, 468418, 468419, 468420, 468421, 468422, 468423, 468424, 468425, 468426, 468427, 468428, 468429, 468430, 468431, 468432, 468433, 468434, 468435, 468436, 468437], "558849":[467887, 467888, 467889, 467890, 467891, 467892, 467893, 467894, 467895], "558865":[467403, 467416, 467417, 467470, 467473, 467494, 467503, 467511, 467568, 467794, 467795, 468446, 468447, 468448, 468449, 468450, 468451, 468452, 468453, 468454, 468455, 468456, 468457, 468458, 468459, 468460, 468461, 468462, 468463, 468464, 468465, 468466, 468467, 468468, 468469, 468470, 468471, 468472, 468473, 468474, 468475, 468476, 468477, 468478, 468479, 468480, 468481, 468482, 468483, 468484, 468485, 468486, 468487, 468488, 468489, 468490, 468491, 468492, 468493, 468494, 468495, 468496, 468497, 468498, 468499, 468500, 468501, 468502, 468503, 468504, 468505, 468506], "558850":[467296, 467397, 467399, 467400, 467405, 467408, 467414, 467424, 467461, 467472, 467476, 467477, 467489, 467543, 467562, 467564, 467566, 467906, 467907, 467908, 467909, 467910, 468033, 468035, 468036, 468040, 468041, 468044, 468045, 468046, 468047, 468048, 468049, 468063, 468064, 468065, 468066, 468067, 468068, 468069, 468070, 468071, 468072, 468073, 468074, 468075, 468076, 468077, 468078, 468104, 468105, 468106, 468107, 468108, 468109, 468110, 468111, 468112, 468113, 468114, 468115, 468116, 468117, 468118, 468119, 468120, 468121, 468122, 468123, 468124, 468125, 468126, 468127, 468128, 468129, 468130, 468131, 468132, 468133, 468134, 468135, 468136, 468137, 468138, 468139, 468140, 468141, 468142, 468143, 468144], "558835":[467283, 467284, 467285, 467286, 467287, 467288, 467289, 467290, 467291, 467292, 467293, 467294, 467295, 467296, 467297, 467298, 467299, 467300, 467301, 467302, 467303, 467304, 467305, 467306, 467307, 467308, 467309, 467310, 467311, 467312, 467313, 467314, 467315, 467316, 467317, 467318, 467319, 467320, 467321, 467322, 467323, 467324, 467325, 467326, 467327, 467328, 467329, 467330, 467331, 467332, 467333, 467334, 467335, 467336, 467337, 467338, 467339, 467340, 467341, 467342, 467343, 467344, 467345, 467346, 467347, 467348, 467349, 467350, 467351, 467352, 467353, 467354, 467355, 467356, 467357, 467358, 467359, 467360, 467361, 467362, 467363, 467364, 467365, 467366, 467367, 467368, 467369, 467370, 467371, 467372, 467373, 467374, 467375, 467376, 467377, 467378, 467379, 467380, 467381, 467382, 467383, 467384, 467385, 467386, 467387, 467388, 467389, 467390, 467391, 467392, 467393, 467394, 467395, 467396, 467397, 467398, 467399, 467400, 467401, 467402, 467403, 467404, 467405, 467406, 467407, 467408, 467409, 467410, 467411, 467412, 467413, 467414, 467415, 467416, 467417, 467418, 467419, 467420, 467421, 467422, 467423, 467424, 467425, 467426, 467427, 467428, 467429, 467430, 467431, 467432, 467433, 467434, 467435, 467436, 467437, 467438, 467439, 467440, 467441, 467442, 467443, 467444, 467445, 467446, 467447, 467448, 467449, 467450, 467451, 467452, 467453, 467454, 467455, 467456, 467457, 467458, 467459, 467460, 467461, 467462, 467463, 467464, 467465, 467466, 467467, 467468, 467469, 467470, 467471, 467472, 467473, 467474, 467475, 467476, 467477, 467478, 467479, 467480, 467481, 467482, 467483, 467484, 467485, 467486, 467487, 467488, 467489, 467490, 467491, 467492, 467493, 467494, 467495, 467496, 467497, 467498, 467499, 467500, 467501, 467502, 467503, 467504, 467505, 467506, 467507, 467508, 467509, 467510, 467511, 467512, 467513, 467514, 467515, 467516, 467517, 467518, 467519, 467520, 467521, 467522, 467523, 467524, 467525, 467526, 467527, 467528, 467529, 467530, 467531, 467532, 467533, 467534, 467535, 467536, 467537, 467538, 467539, 467540, 467541, 467542, 467543, 467544, 467545, 467546, 467547, 467548, 467549, 467550, 467551, 467552, 467553, 467554, 467555, 467556, 467557, 467558, 467559, 467560, 467561, 467562, 467563, 467564, 467565, 467566, 467567, 467568, 467569, 467596, 467597, 467598, 467599, 467600, 467601, 467602, 467603, 467604, 467617, 467618, 467619, 467620, 467621, 467622, 467623, 467624, 467625, 467626, 467627, 467628, 467629, 467630, 467631, 467632, 467633, 467634, 467635, 467636, 467637, 467638, 467639, 467640, 467641, 467642, 467643, 467896, 467897, 467898, 467899, 467900, 467901, 467902, 467903, 467904, 467905, 468438, 468439, 468440, 468441, 468442, 468443, 468444, 468445], "558851":[467911, 467912, 467913, 467914, 467915, 467916, 467917, 467918, 467919, 467920, 467921, 467922, 467923, 467924, 467925, 467926, 467927, 467928, 467929, 467930, 467931, 467932, 467933, 467934, 467935, 467936, 467937, 467938, 467939], "558836":[467570, 467571, 467572, 467573, 467575, 467576, 467577, 467579, 467580, 467581, 467582, 467583, 467584, 467585, 467586, 467587, 467588, 467589, 467590, 467591, 467592, 467593, 467594, 467595], "558852":[467300, 467492, 467533, 467546, 467940, 467941, 467942, 467943, 467944, 467945, 467946, 467947, 467948, 467949, 467950, 467951, 467952, 467953, 467954, 467955, 467956, 467957, 467958, 467959, 467960, 467961, 467962, 467963, 467964, 467965, 467966, 467967, 467968, 467969], "558837":[467564, 467605, 467606, 467607, 467608, 467609, 467610], "558853":[467970, 467971, 467972, 467973, 467974, 467975, 467976, 467977, 467978, 467979, 467980, 467981, 467982, 467983, 467984, 467985, 467986, 467987, 467988, 467989, 467990, 467991, 467992, 467993, 467994, 467995, 467996, 467997, 467998, 467999], "558838":[467424, 467611, 467612, 467613, 467614, 467615, 467616], "558854":[468000, 468001, 468002, 468003, 468004, 468005, 468006, 468007, 468008, 468009, 468010, 468011, 468012, 468013, 468014, 468015, 468016, 468017, 468018, 468019, 468020, 468021, 468022, 468023, 468024, 468025, 468026, 468027, 468028, 468029, 468030], "558839":[467463, 467549, 467550, 467553, 467555, 467560, 467644, 467645, 467646, 467647], "558855":[467408, 468031, 468032, 468033, 468034, 468035, 468036, 468037, 468038, 468039, 468040, 468041, 468042, 468043, 468044, 468045], "558840":[467648, 467649, 467650, 467651, 467652, 467653, 467654, 467655, 467656, 467657, 467658, 467659, 467660, 467661, 467662, 467663, 467664, 467665, 467666, 467667, 467668, 467669, 467670, 467671, 467672, 467673, 467674, 467675, 467676, 467677, 467678, 467679, 467680, 467681, 467682, 467683, 467684, 467685, 467686, 467687, 467688, 467689, 467690, 467691, 467692, 467693, 467694, 467695, 467696, 467697, 467698, 467699, 467700, 467701, 467702, 467703, 467704, 467705, 467706, 467707, 467708, 467709, 467710, 467711, 467712, 467713, 467714, 467715, 467716, 467717, 467718, 467719, 467720, 467721, 467722, 467723, 467724, 467725, 467726, 467727, 467728, 467729, 467730], "558856":[468050, 468051, 468052, 468053, 468054, 468055, 468056, 468057, 468058, 468059, 468060, 468061, 468062], "558841":[467537, 467731, 467732, 467733, 467734, 467735, 467736, 467737, 467738, 467739, 467740, 467741, 467742, 467743, 467744, 467745, 467746, 467747, 467748, 467749, 467750, 467751, 467752, 467753], "558857":[468079, 468080, 468081, 468082, 468083, 468084, 468085, 468086, 468087, 468088, 468089, 468090, 468091, 468092, 468093, 468094, 468095, 468096, 468097, 468098, 468099, 468100, 468101, 468102, 468103], "558842":[467488, 467754, 467755, 467756, 467757, 467758, 467759, 467760, 467761, 467762, 467763, 467764, 467765, 467766, 467767, 467768, 467769], "558858":[467408, 467476, 467562, 467564, 468032, 468145, 468146, 468147, 468148, 468149], "558843":[467770, 467771, 467772, 467773, 467811, 467812, 467813, 467814, 467815, 467816, 467817, 467818, 467819, 467820, 467821, 467822, 467823]}'
      b = json.parse (b)

local c, e, y, gg = a.params [2] [1].UserID, {}, 0, {}

for f = 1, #a.params [3] do
	e [#e + 1] = a.params [3] [f].ListID
	e [#e + 1] = a.params [3] [f].LearningContext
end

a.params [2] = {}
a.params [3] = {}

for f = 1, #e / 2 , 2 do
	local g = b [''..e [f]]
	local z = 0
	for h = 1, #g do
		local t, tt = math.random (6, 11), math.random (6, 11)
		z = z + t + tt
		a.params [2] [#a.params [2] + 1] = {
			UserID          = c,
			QuestionID      = g [h],
			Time            = t,
			TimeMS          = json.null,
			Correct         = true,
			Attempts        = 1,
			ListID          = e [f],
			LearningContext = e [f + 1]
		}
		a.params [2] [#a.params [2] + 1] = {
			UserID          = c,
			QuestionID      = g [h],
			Time            = tt,
			TimeMS          = json.null,
			Correct         = true,
			Attempts        = 2,
			ListID          = e [f],
			LearningContext = e [f + 1]
		}
	end
	a.params [3] [#a.params [3] + 1] = {
		ListID            = e [f],
		QuestionsAnswered = (#g) * 2,
		TimeTaken         = z,
		TimeTakenMS       = json.null,
		LearningContext   = e [f + 1]
	}
	gg [#gg + 1] = e [f]
	gg [#gg + 1] = e [f + 1]
	y = y + z
end
a.params [4] = y

a = json.stringify (a)
print (a, #a)
print (json.stringify (gg))

-- Editing nz.co.LanguagePerfect.Services.PortalsAsync.App.AppServicesPortal.StoreActivityUsageData3
-- Module

local a = [[]]
      a = json.parse (a)
local b = '{"558859":[468150, 468151, 468152, 468153, 468154, 468155, 468156, 468157, 468158, 468159, 468160, 468161, 468162, 468163, 468164, 468165, 468166, 468167, 468168, 468169, 468170, 468171, 468172, 468173, 468174, 468175, 468176, 468177, 468178, 468179, 468180, 468181, 468182, 468183, 468184, 468185, 468186, 468187, 468188, 468189, 468190, 468191, 468192, 468193, 468194, 468195, 468196, 468197, 468198, 468199, 468200, 468201, 468202, 468203, 468204, 468205, 468206, 468207, 468208, 468209, 468210, 468211, 468212, 468213, 468214, 468215, 468216, 468217, 468218, 468219, 468220, 468221, 468222, 468223, 468224, 468225, 468226, 468227, 468228, 468229, 468230, 468231, 468232, 468233], "558844":[467774, 467775, 467776, 467777, 467778, 467779, 467780], "558860":[467553, 468234, 468235, 468236, 468237, 468238, 468239, 468240, 468241, 468242, 468243, 468244, 468245, 468246, 468247, 468248, 468249, 468250, 468251, 468252, 468253, 468254], "558845":[467304, 467781, 467782, 467783, 467784, 467785, 467786, 467787, 467788, 467789, 467790, 467791, 467792, 467793, 467794, 467795], "558861":[468255, 468256, 468257, 468258, 468259, 468260, 468261, 468262, 468263, 468264, 468265, 468266, 468267, 468268, 468269, 468270, 468271, 468272, 468273, 468274, 468275, 468276, 468277, 468278, 468279, 468280, 468281, 468282, 468283, 468284, 468285, 468286, 468287, 468288, 468289, 468290, 468291, 468292, 468293, 468294, 468295, 468296, 468297, 468298, 468299, 468300, 468301, 468302, 468303, 468304, 468305, 468306], "558846":[467796, 467797, 467798, 467799, 467800, 467801, 467802, 467803, 467804, 467805, 467806, 467807, 467808, 467809, 467810], "558862":[468307, 468308, 468309, 468310, 468311, 468312, 468313, 468314, 468315, 468316, 468317], "558847":[467824, 467825, 467826, 467827, 467828, 467829, 467830, 467831, 467832, 467833, 467834, 467835, 467836, 467837, 467838, 467839], "558863":[468179, 468278, 468318, 468319, 468320, 468321, 468322, 468323, 468324, 468325, 468326, 468327, 468328, 468329, 468330, 468331, 468332, 468333, 468334, 468335, 468336, 468337, 468338, 468339, 468340, 468341, 468342, 468343, 468344, 468345, 468346, 468347, 468348, 468349, 468350, 468351, 468352, 468353, 468354, 468355, 468356, 468357, 468358, 468359, 468360, 468361, 468362, 468363, 468364, 468365, 468366, 468367, 468368, 468369, 468370, 468371, 468372, 468373, 468374, 468375, 468376, 468377, 468378, 468379, 468380, 468381, 468382, 468383, 468384, 468385, 468386, 468387, 468388, 468389, 468390, 468391, 468392, 468393], "558848":[467398, 467840, 467841, 467842, 467843, 467844, 467845, 467846, 467847, 467848, 467849, 467850, 467851, 467852, 467853, 467854, 467855, 467856, 467857, 467858, 467859, 467860, 467861, 467862, 467863, 467864, 467865, 467866, 467867, 467868, 467869, 467870, 467871, 467872, 467873, 467874, 467875, 467876, 467877, 467878, 467879, 467880, 467881, 467882, 467883, 467884, 467885, 467886], "558864":[468394, 468395, 468396, 468397, 468398, 468399, 468400, 468401, 468402, 468403, 468404, 468405, 468406, 468407, 468408, 468409, 468410, 468411, 468412, 468413, 468414, 468415, 468416, 468417, 468418, 468419, 468420, 468421, 468422, 468423, 468424, 468425, 468426, 468427, 468428, 468429, 468430, 468431, 468432, 468433, 468434, 468435, 468436, 468437], "558849":[467887, 467888, 467889, 467890, 467891, 467892, 467893, 467894, 467895], "558865":[467403, 467416, 467417, 467470, 467473, 467494, 467503, 467511, 467568, 467794, 467795, 468446, 468447, 468448, 468449, 468450, 468451, 468452, 468453, 468454, 468455, 468456, 468457, 468458, 468459, 468460, 468461, 468462, 468463, 468464, 468465, 468466, 468467, 468468, 468469, 468470, 468471, 468472, 468473, 468474, 468475, 468476, 468477, 468478, 468479, 468480, 468481, 468482, 468483, 468484, 468485, 468486, 468487, 468488, 468489, 468490, 468491, 468492, 468493, 468494, 468495, 468496, 468497, 468498, 468499, 468500, 468501, 468502, 468503, 468504, 468505, 468506], "558850":[467296, 467397, 467399, 467400, 467405, 467408, 467414, 467424, 467461, 467472, 467476, 467477, 467489, 467543, 467562, 467564, 467566, 467906, 467907, 467908, 467909, 467910, 468033, 468035, 468036, 468040, 468041, 468044, 468045, 468046, 468047, 468048, 468049, 468063, 468064, 468065, 468066, 468067, 468068, 468069, 468070, 468071, 468072, 468073, 468074, 468075, 468076, 468077, 468078, 468104, 468105, 468106, 468107, 468108, 468109, 468110, 468111, 468112, 468113, 468114, 468115, 468116, 468117, 468118, 468119, 468120, 468121, 468122, 468123, 468124, 468125, 468126, 468127, 468128, 468129, 468130, 468131, 468132, 468133, 468134, 468135, 468136, 468137, 468138, 468139, 468140, 468141, 468142, 468143, 468144], "558835":[467283, 467284, 467285, 467286, 467287, 467288, 467289, 467290, 467291, 467292, 467293, 467294, 467295, 467296, 467297, 467298, 467299, 467300, 467301, 467302, 467303, 467304, 467305, 467306, 467307, 467308, 467309, 467310, 467311, 467312, 467313, 467314, 467315, 467316, 467317, 467318, 467319, 467320, 467321, 467322, 467323, 467324, 467325, 467326, 467327, 467328, 467329, 467330, 467331, 467332, 467333, 467334, 467335, 467336, 467337, 467338, 467339, 467340, 467341, 467342, 467343, 467344, 467345, 467346, 467347, 467348, 467349, 467350, 467351, 467352, 467353, 467354, 467355, 467356, 467357, 467358, 467359, 467360, 467361, 467362, 467363, 467364, 467365, 467366, 467367, 467368, 467369, 467370, 467371, 467372, 467373, 467374, 467375, 467376, 467377, 467378, 467379, 467380, 467381, 467382, 467383, 467384, 467385, 467386, 467387, 467388, 467389, 467390, 467391, 467392, 467393, 467394, 467395, 467396, 467397, 467398, 467399, 467400, 467401, 467402, 467403, 467404, 467405, 467406, 467407, 467408, 467409, 467410, 467411, 467412, 467413, 467414, 467415, 467416, 467417, 467418, 467419, 467420, 467421, 467422, 467423, 467424, 467425, 467426, 467427, 467428, 467429, 467430, 467431, 467432, 467433, 467434, 467435, 467436, 467437, 467438, 467439, 467440, 467441, 467442, 467443, 467444, 467445, 467446, 467447, 467448, 467449, 467450, 467451, 467452, 467453, 467454, 467455, 467456, 467457, 467458, 467459, 467460, 467461, 467462, 467463, 467464, 467465, 467466, 467467, 467468, 467469, 467470, 467471, 467472, 467473, 467474, 467475, 467476, 467477, 467478, 467479, 467480, 467481, 467482, 467483, 467484, 467485, 467486, 467487, 467488, 467489, 467490, 467491, 467492, 467493, 467494, 467495, 467496, 467497, 467498, 467499, 467500, 467501, 467502, 467503, 467504, 467505, 467506, 467507, 467508, 467509, 467510, 467511, 467512, 467513, 467514, 467515, 467516, 467517, 467518, 467519, 467520, 467521, 467522, 467523, 467524, 467525, 467526, 467527, 467528, 467529, 467530, 467531, 467532, 467533, 467534, 467535, 467536, 467537, 467538, 467539, 467540, 467541, 467542, 467543, 467544, 467545, 467546, 467547, 467548, 467549, 467550, 467551, 467552, 467553, 467554, 467555, 467556, 467557, 467558, 467559, 467560, 467561, 467562, 467563, 467564, 467565, 467566, 467567, 467568, 467569, 467596, 467597, 467598, 467599, 467600, 467601, 467602, 467603, 467604, 467617, 467618, 467619, 467620, 467621, 467622, 467623, 467624, 467625, 467626, 467627, 467628, 467629, 467630, 467631, 467632, 467633, 467634, 467635, 467636, 467637, 467638, 467639, 467640, 467641, 467642, 467643, 467896, 467897, 467898, 467899, 467900, 467901, 467902, 467903, 467904, 467905, 468438, 468439, 468440, 468441, 468442, 468443, 468444, 468445], "558851":[467911, 467912, 467913, 467914, 467915, 467916, 467917, 467918, 467919, 467920, 467921, 467922, 467923, 467924, 467925, 467926, 467927, 467928, 467929, 467930, 467931, 467932, 467933, 467934, 467935, 467936, 467937, 467938, 467939], "558836":[467570, 467571, 467572, 467573, 467575, 467576, 467577, 467579, 467580, 467581, 467582, 467583, 467584, 467585, 467586, 467587, 467588, 467589, 467590, 467591, 467592, 467593, 467594, 467595], "558852":[467300, 467492, 467533, 467546, 467940, 467941, 467942, 467943, 467944, 467945, 467946, 467947, 467948, 467949, 467950, 467951, 467952, 467953, 467954, 467955, 467956, 467957, 467958, 467959, 467960, 467961, 467962, 467963, 467964, 467965, 467966, 467967, 467968, 467969], "558837":[467564, 467605, 467606, 467607, 467608, 467609, 467610], "558853":[467970, 467971, 467972, 467973, 467974, 467975, 467976, 467977, 467978, 467979, 467980, 467981, 467982, 467983, 467984, 467985, 467986, 467987, 467988, 467989, 467990, 467991, 467992, 467993, 467994, 467995, 467996, 467997, 467998, 467999], "558838":[467424, 467611, 467612, 467613, 467614, 467615, 467616], "558854":[468000, 468001, 468002, 468003, 468004, 468005, 468006, 468007, 468008, 468009, 468010, 468011, 468012, 468013, 468014, 468015, 468016, 468017, 468018, 468019, 468020, 468021, 468022, 468023, 468024, 468025, 468026, 468027, 468028, 468029, 468030], "558839":[467463, 467549, 467550, 467553, 467555, 467560, 467644, 467645, 467646, 467647], "558855":[467408, 468031, 468032, 468033, 468034, 468035, 468036, 468037, 468038, 468039, 468040, 468041, 468042, 468043, 468044, 468045], "558840":[467648, 467649, 467650, 467651, 467652, 467653, 467654, 467655, 467656, 467657, 467658, 467659, 467660, 467661, 467662, 467663, 467664, 467665, 467666, 467667, 467668, 467669, 467670, 467671, 467672, 467673, 467674, 467675, 467676, 467677, 467678, 467679, 467680, 467681, 467682, 467683, 467684, 467685, 467686, 467687, 467688, 467689, 467690, 467691, 467692, 467693, 467694, 467695, 467696, 467697, 467698, 467699, 467700, 467701, 467702, 467703, 467704, 467705, 467706, 467707, 467708, 467709, 467710, 467711, 467712, 467713, 467714, 467715, 467716, 467717, 467718, 467719, 467720, 467721, 467722, 467723, 467724, 467725, 467726, 467727, 467728, 467729, 467730], "558856":[468050, 468051, 468052, 468053, 468054, 468055, 468056, 468057, 468058, 468059, 468060, 468061, 468062], "558841":[467537, 467731, 467732, 467733, 467734, 467735, 467736, 467737, 467738, 467739, 467740, 467741, 467742, 467743, 467744, 467745, 467746, 467747, 467748, 467749, 467750, 467751, 467752, 467753], "558857":[468079, 468080, 468081, 468082, 468083, 468084, 468085, 468086, 468087, 468088, 468089, 468090, 468091, 468092, 468093, 468094, 468095, 468096, 468097, 468098, 468099, 468100, 468101, 468102, 468103], "558842":[467488, 467754, 467755, 467756, 467757, 467758, 467759, 467760, 467761, 467762, 467763, 467764, 467765, 467766, 467767, 467768, 467769], "558858":[467408, 467476, 467562, 467564, 468032, 468145, 468146, 468147, 468148, 468149], "558843":[467770, 467771, 467772, 467773, 467811, 467812, 467813, 467814, 467815, 467816, 467817, 467818, 467819, 467820, 467821, 467822, 467823]}'
      b = json.parse (b)

local c, e, y, gg = a.params [2] [1].UserID, {}, 0, {}

for d, _ in pairs (b) do
	e [#e + 1] = d
	e [#e + 1] = 0
	e [#e + 1] = d
	e [#e + 1] = 1
end

a.params [2] = {}
a.params [3] = {}

for f = 1, #e / 2 , 2 do
	local g = b [''..e [f]]
	local z = 0
	for h = 1, #g do
		local t, tt = math.random (6, 11), math.random (6, 11)
		z = z + t + tt
		a.params [2] [#a.params [2] + 1] = {
			UserID          = c,
			QuestionID      = g [h],
			Time            = t,
			TimeMS          = json.null,
			Correct         = true,
			Attempts        = 1,
			ListID          = e [f],
			LearningContext = e [f + 1]
		}
		a.params [2] [#a.params [2] + 1] = {
			UserID          = c,
			QuestionID      = g [h],
			Time            = tt,
			TimeMS          = json.null,
			Correct         = true,
			Attempts        = 2,
			ListID          = e [f],
			LearningContext = e [f + 1]
		}
	end
	a.params [3] [#a.params [3] + 1] = {
		ListID            = e [f],
		QuestionsAnswered = (#g) * 2,
		TimeTaken         = z,
		TimeTakenMS       = json.null,
		LearningContext   = e [f + 1]
	}
	gg [#gg + 1] = e [f]
	gg [#gg + 1] = e [f + 1]
	y = y + z
end
a.params [4] = y

a = json.stringify (a)
print (a, #a)
print (json.stringify (gg))

-- Editing nz.co.LanguagePerfect.Services.PortalsAsync.App.AppServicesPortal.StoreActivityProgress2
-- Single & Module

local a = [[{"id":5370,"method":"nz.co.LanguagePerfect.Services.PortalsAsync.App.AppServicesPortal.StoreActivityProgress2","params":[330223608350655,1,6,29,[{"TranslationID":467796,"TranslationDirection":1,"NewNumberRight":2,"NewNumberWrong":0,"NewData":98},{"TranslationID":467797,"TranslationDirection":1,"NewNumberRight":2,"NewNumberWrong":0,"NewData":98},{"TranslationID":467798,"TranslationDirection":1,"NewNumberRight":2,"NewNumberWrong":0,"NewData":98},{"TranslationID":467799,"TranslationDirection":1,"NewNumberRight":2,"NewNumberWrong":0,"NewData":98},{"TranslationID":467800,"TranslationDirection":1,"NewNumberRight":2,"NewNumberWrong":0,"NewData":98},{"TranslationID":467801,"TranslationDirection":1,"NewNumberRight":2,"NewNumberWrong":0,"NewData":98},{"TranslationID":467802,"TranslationDirection":1,"NewNumberRight":1,"NewNumberWrong":0,"NewData":33},{"TranslationID":467803,"TranslationDirection":1,"NewNumberRight":1,"NewNumberWrong":0,"NewData":33},{"TranslationID":467804,"TranslationDirection":1,"NewNumberRight":1,"NewNumberWrong":0,"NewData":33}],660,"e98587dd-7341-7e1b-4827-842624ffc083"]}]]
      a = json.parse (a)
local b = '{"558859":[468150, 468151, 468152, 468153, 468154, 468155, 468156, 468157, 468158, 468159, 468160, 468161, 468162, 468163, 468164, 468165, 468166, 468167, 468168, 468169, 468170, 468171, 468172, 468173, 468174, 468175, 468176, 468177, 468178, 468179, 468180, 468181, 468182, 468183, 468184, 468185, 468186, 468187, 468188, 468189, 468190, 468191, 468192, 468193, 468194, 468195, 468196, 468197, 468198, 468199, 468200, 468201, 468202, 468203, 468204, 468205, 468206, 468207, 468208, 468209, 468210, 468211, 468212, 468213, 468214, 468215, 468216, 468217, 468218, 468219, 468220, 468221, 468222, 468223, 468224, 468225, 468226, 468227, 468228, 468229, 468230, 468231, 468232, 468233], "558844":[467774, 467775, 467776, 467777, 467778, 467779, 467780], "558860":[467553, 468234, 468235, 468236, 468237, 468238, 468239, 468240, 468241, 468242, 468243, 468244, 468245, 468246, 468247, 468248, 468249, 468250, 468251, 468252, 468253, 468254], "558845":[467304, 467781, 467782, 467783, 467784, 467785, 467786, 467787, 467788, 467789, 467790, 467791, 467792, 467793, 467794, 467795], "558861":[468255, 468256, 468257, 468258, 468259, 468260, 468261, 468262, 468263, 468264, 468265, 468266, 468267, 468268, 468269, 468270, 468271, 468272, 468273, 468274, 468275, 468276, 468277, 468278, 468279, 468280, 468281, 468282, 468283, 468284, 468285, 468286, 468287, 468288, 468289, 468290, 468291, 468292, 468293, 468294, 468295, 468296, 468297, 468298, 468299, 468300, 468301, 468302, 468303, 468304, 468305, 468306], "558846":[467796, 467797, 467798, 467799, 467800, 467801, 467802, 467803, 467804, 467805, 467806, 467807, 467808, 467809, 467810], "558862":[468307, 468308, 468309, 468310, 468311, 468312, 468313, 468314, 468315, 468316, 468317], "558847":[467824, 467825, 467826, 467827, 467828, 467829, 467830, 467831, 467832, 467833, 467834, 467835, 467836, 467837, 467838, 467839], "558863":[468179, 468278, 468318, 468319, 468320, 468321, 468322, 468323, 468324, 468325, 468326, 468327, 468328, 468329, 468330, 468331, 468332, 468333, 468334, 468335, 468336, 468337, 468338, 468339, 468340, 468341, 468342, 468343, 468344, 468345, 468346, 468347, 468348, 468349, 468350, 468351, 468352, 468353, 468354, 468355, 468356, 468357, 468358, 468359, 468360, 468361, 468362, 468363, 468364, 468365, 468366, 468367, 468368, 468369, 468370, 468371, 468372, 468373, 468374, 468375, 468376, 468377, 468378, 468379, 468380, 468381, 468382, 468383, 468384, 468385, 468386, 468387, 468388, 468389, 468390, 468391, 468392, 468393], "558848":[467398, 467840, 467841, 467842, 467843, 467844, 467845, 467846, 467847, 467848, 467849, 467850, 467851, 467852, 467853, 467854, 467855, 467856, 467857, 467858, 467859, 467860, 467861, 467862, 467863, 467864, 467865, 467866, 467867, 467868, 467869, 467870, 467871, 467872, 467873, 467874, 467875, 467876, 467877, 467878, 467879, 467880, 467881, 467882, 467883, 467884, 467885, 467886], "558864":[468394, 468395, 468396, 468397, 468398, 468399, 468400, 468401, 468402, 468403, 468404, 468405, 468406, 468407, 468408, 468409, 468410, 468411, 468412, 468413, 468414, 468415, 468416, 468417, 468418, 468419, 468420, 468421, 468422, 468423, 468424, 468425, 468426, 468427, 468428, 468429, 468430, 468431, 468432, 468433, 468434, 468435, 468436, 468437], "558849":[467887, 467888, 467889, 467890, 467891, 467892, 467893, 467894, 467895], "558865":[467403, 467416, 467417, 467470, 467473, 467494, 467503, 467511, 467568, 467794, 467795, 468446, 468447, 468448, 468449, 468450, 468451, 468452, 468453, 468454, 468455, 468456, 468457, 468458, 468459, 468460, 468461, 468462, 468463, 468464, 468465, 468466, 468467, 468468, 468469, 468470, 468471, 468472, 468473, 468474, 468475, 468476, 468477, 468478, 468479, 468480, 468481, 468482, 468483, 468484, 468485, 468486, 468487, 468488, 468489, 468490, 468491, 468492, 468493, 468494, 468495, 468496, 468497, 468498, 468499, 468500, 468501, 468502, 468503, 468504, 468505, 468506], "558850":[467296, 467397, 467399, 467400, 467405, 467408, 467414, 467424, 467461, 467472, 467476, 467477, 467489, 467543, 467562, 467564, 467566, 467906, 467907, 467908, 467909, 467910, 468033, 468035, 468036, 468040, 468041, 468044, 468045, 468046, 468047, 468048, 468049, 468063, 468064, 468065, 468066, 468067, 468068, 468069, 468070, 468071, 468072, 468073, 468074, 468075, 468076, 468077, 468078, 468104, 468105, 468106, 468107, 468108, 468109, 468110, 468111, 468112, 468113, 468114, 468115, 468116, 468117, 468118, 468119, 468120, 468121, 468122, 468123, 468124, 468125, 468126, 468127, 468128, 468129, 468130, 468131, 468132, 468133, 468134, 468135, 468136, 468137, 468138, 468139, 468140, 468141, 468142, 468143, 468144], "558835":[467283, 467284, 467285, 467286, 467287, 467288, 467289, 467290, 467291, 467292, 467293, 467294, 467295, 467296, 467297, 467298, 467299, 467300, 467301, 467302, 467303, 467304, 467305, 467306, 467307, 467308, 467309, 467310, 467311, 467312, 467313, 467314, 467315, 467316, 467317, 467318, 467319, 467320, 467321, 467322, 467323, 467324, 467325, 467326, 467327, 467328, 467329, 467330, 467331, 467332, 467333, 467334, 467335, 467336, 467337, 467338, 467339, 467340, 467341, 467342, 467343, 467344, 467345, 467346, 467347, 467348, 467349, 467350, 467351, 467352, 467353, 467354, 467355, 467356, 467357, 467358, 467359, 467360, 467361, 467362, 467363, 467364, 467365, 467366, 467367, 467368, 467369, 467370, 467371, 467372, 467373, 467374, 467375, 467376, 467377, 467378, 467379, 467380, 467381, 467382, 467383, 467384, 467385, 467386, 467387, 467388, 467389, 467390, 467391, 467392, 467393, 467394, 467395, 467396, 467397, 467398, 467399, 467400, 467401, 467402, 467403, 467404, 467405, 467406, 467407, 467408, 467409, 467410, 467411, 467412, 467413, 467414, 467415, 467416, 467417, 467418, 467419, 467420, 467421, 467422, 467423, 467424, 467425, 467426, 467427, 467428, 467429, 467430, 467431, 467432, 467433, 467434, 467435, 467436, 467437, 467438, 467439, 467440, 467441, 467442, 467443, 467444, 467445, 467446, 467447, 467448, 467449, 467450, 467451, 467452, 467453, 467454, 467455, 467456, 467457, 467458, 467459, 467460, 467461, 467462, 467463, 467464, 467465, 467466, 467467, 467468, 467469, 467470, 467471, 467472, 467473, 467474, 467475, 467476, 467477, 467478, 467479, 467480, 467481, 467482, 467483, 467484, 467485, 467486, 467487, 467488, 467489, 467490, 467491, 467492, 467493, 467494, 467495, 467496, 467497, 467498, 467499, 467500, 467501, 467502, 467503, 467504, 467505, 467506, 467507, 467508, 467509, 467510, 467511, 467512, 467513, 467514, 467515, 467516, 467517, 467518, 467519, 467520, 467521, 467522, 467523, 467524, 467525, 467526, 467527, 467528, 467529, 467530, 467531, 467532, 467533, 467534, 467535, 467536, 467537, 467538, 467539, 467540, 467541, 467542, 467543, 467544, 467545, 467546, 467547, 467548, 467549, 467550, 467551, 467552, 467553, 467554, 467555, 467556, 467557, 467558, 467559, 467560, 467561, 467562, 467563, 467564, 467565, 467566, 467567, 467568, 467569, 467596, 467597, 467598, 467599, 467600, 467601, 467602, 467603, 467604, 467617, 467618, 467619, 467620, 467621, 467622, 467623, 467624, 467625, 467626, 467627, 467628, 467629, 467630, 467631, 467632, 467633, 467634, 467635, 467636, 467637, 467638, 467639, 467640, 467641, 467642, 467643, 467896, 467897, 467898, 467899, 467900, 467901, 467902, 467903, 467904, 467905, 468438, 468439, 468440, 468441, 468442, 468443, 468444, 468445], "558851":[467911, 467912, 467913, 467914, 467915, 467916, 467917, 467918, 467919, 467920, 467921, 467922, 467923, 467924, 467925, 467926, 467927, 467928, 467929, 467930, 467931, 467932, 467933, 467934, 467935, 467936, 467937, 467938, 467939], "558836":[467570, 467571, 467572, 467573, 467575, 467576, 467577, 467579, 467580, 467581, 467582, 467583, 467584, 467585, 467586, 467587, 467588, 467589, 467590, 467591, 467592, 467593, 467594, 467595], "558852":[467300, 467492, 467533, 467546, 467940, 467941, 467942, 467943, 467944, 467945, 467946, 467947, 467948, 467949, 467950, 467951, 467952, 467953, 467954, 467955, 467956, 467957, 467958, 467959, 467960, 467961, 467962, 467963, 467964, 467965, 467966, 467967, 467968, 467969], "558837":[467564, 467605, 467606, 467607, 467608, 467609, 467610], "558853":[467970, 467971, 467972, 467973, 467974, 467975, 467976, 467977, 467978, 467979, 467980, 467981, 467982, 467983, 467984, 467985, 467986, 467987, 467988, 467989, 467990, 467991, 467992, 467993, 467994, 467995, 467996, 467997, 467998, 467999], "558838":[467424, 467611, 467612, 467613, 467614, 467615, 467616], "558854":[468000, 468001, 468002, 468003, 468004, 468005, 468006, 468007, 468008, 468009, 468010, 468011, 468012, 468013, 468014, 468015, 468016, 468017, 468018, 468019, 468020, 468021, 468022, 468023, 468024, 468025, 468026, 468027, 468028, 468029, 468030], "558839":[467463, 467549, 467550, 467553, 467555, 467560, 467644, 467645, 467646, 467647], "558855":[467408, 468031, 468032, 468033, 468034, 468035, 468036, 468037, 468038, 468039, 468040, 468041, 468042, 468043, 468044, 468045], "558840":[467648, 467649, 467650, 467651, 467652, 467653, 467654, 467655, 467656, 467657, 467658, 467659, 467660, 467661, 467662, 467663, 467664, 467665, 467666, 467667, 467668, 467669, 467670, 467671, 467672, 467673, 467674, 467675, 467676, 467677, 467678, 467679, 467680, 467681, 467682, 467683, 467684, 467685, 467686, 467687, 467688, 467689, 467690, 467691, 467692, 467693, 467694, 467695, 467696, 467697, 467698, 467699, 467700, 467701, 467702, 467703, 467704, 467705, 467706, 467707, 467708, 467709, 467710, 467711, 467712, 467713, 467714, 467715, 467716, 467717, 467718, 467719, 467720, 467721, 467722, 467723, 467724, 467725, 467726, 467727, 467728, 467729, 467730], "558856":[468050, 468051, 468052, 468053, 468054, 468055, 468056, 468057, 468058, 468059, 468060, 468061, 468062], "558841":[467537, 467731, 467732, 467733, 467734, 467735, 467736, 467737, 467738, 467739, 467740, 467741, 467742, 467743, 467744, 467745, 467746, 467747, 467748, 467749, 467750, 467751, 467752, 467753], "558857":[468079, 468080, 468081, 468082, 468083, 468084, 468085, 468086, 468087, 468088, 468089, 468090, 468091, 468092, 468093, 468094, 468095, 468096, 468097, 468098, 468099, 468100, 468101, 468102, 468103], "558842":[467488, 467754, 467755, 467756, 467757, 467758, 467759, 467760, 467761, 467762, 467763, 467764, 467765, 467766, 467767, 467768, 467769], "558858":[467408, 467476, 467562, 467564, 468032, 468145, 468146, 468147, 468148, 468149], "558843":[467770, 467771, 467772, 467773, 467811, 467812, 467813, 467814, 467815, 467816, 467817, 467818, 467819, 467820, 467821, 467822, 467823]}'
      b = json.parse (b)
local c = '[558846, 1]'
      c = json.parse (c)

a.params [5] = {}

local d = 1
for e = 1, #c / 2, 2 do
	local f = b [''..c [e]]
	for g = 1, #f do
		a.params [5] [#a.params [5] + 1] = {
			TranslationID        = f [g],
			TranslationDirection = c [e + 1],
			NewNumberRight       = 2,
			NewNumberWrong       = 0,
			NewData              = 98
		}
	end
	d = d + 1
end

a = json.stringify (a)
print (a, #a)

-- Edit
